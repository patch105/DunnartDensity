---
title: "Julia Creek Dunnart Density Analysis"
author: "Charlotte Patterson"
format: html
editor: visual
---

## Project Description

The Julia Creek Dunnart (*Sminthopsis douglasi*) is an endangered small mammal found in central west Queensland, Australia. This project aims to provide the first population density and population size estimates for *S. douglasi* within a national park. Density and population size are estimated via spatially explicit capture-recapture, using live capture data collected over seven trapping sessions between 2022 and 2023.

Further details of the project methods, results, and discussion are presented in our paper entitled: "Density of a cryptic Australian small mammal: the threatened Julia Creek Dunnart (*Sminthopsis douglasi*)" Ecology and Evolution. A. H. Bakker, Patterson C.R., Mifsud G., Reside A., Fuller S., and Baker A.M.

# Load required packages

```{r}
#| output: false
library(purrr)

packages <- c("secr", "sf", "ggplot2", "dplyr")

walk(packages, require, character.only = T)

```

# Load the data

Load the capture file and the trap file. View these. Each session is a unique trapping period at one of the two sites (Scrammy - site A, Campbells - site B). Each row is a unique capture event. The ID for individual animals is in the column "ID". The column "occasion" is the trap night for that session. The Detector is the unique ID for each trap. Some sessions caught zero individuals, these sessions are noted in the data with ID == "NONE". Hence, the 'No live releases' comment in the code output.

```{r}

# Set order to make sure session-specific trap layouts match with sessions order at the two field sites (ordered by session name)

CH <- read.capthist("Data/captfile_zeros.txt", c("Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt"), 
                    detector = "multi")

```
## View trapping summary

```{r}

summary(CH, terse = T)

# Or view full summary output
# summary(CH)

```

# Plot recaptures

```{r}

# Load only occasions with no zeros, just to plot recaptures

CH.no.zeros <- read.capthist("Data/captfile.txt", c("Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_campbells_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt", "Data/trapfile_scrammy_MGA2020.txt"), detector = "multi")

par(mar = c(1,1,2,1)) 
plot(CH.no.zeros, tracks = TRUE)


```

View successive trap-revealed movement distances, summarise with the median and a histogram. Observing that most individuals were showing movements \> 50 m (our trap spacing) suggests that even individuals with home range centres outside of the trapping grid would have had the opportunity to be caught (Efford, 2022).

```{r}
m <- unlist(moves(CH)) 
m
median(m)

par(mar = c(5,4,4,2), mgp = c(3,1,0)) # reduce margins
hist(m, breaks = seq(0, 550,30), xlab = "Movement (m)", main = "")
```

## Choosing detection function

We must check the effect of different detection function shapes. We do this by fitting models with the half-normal and exponential functions and comparing the estimated densities. We set the autoini = 4 to set our starting parameter values from a session with capture data. The default for a multi-session analysis is to take starting parameter values from the first session which doesn't work when the session has no captures.

We also compare model fit via AICc (Akaike's Corrected Information Criterion).

```{r}
#The half-normal
fit.HN <- secr.fit(CH,
                detectfn = 'HN',
                buffer = 300,
                details = list(autoini = 4),
                trace = F,
                verify = F)

#Now the exponential
fit.EX <- secr.fit (CH,
                  detectfn = 'EX',
                  buffer = 300,
                  details = list(autoini = 4),
                  trace = FALSE,
                  verify = F)

#Combine into an object of class secrlist
fits <- secrlist(HN = fit.HN, EX = fit.EX)

# Look at the density values, g0 and sigma, plus SEs
predict(fits)

```

The density estimates are similar. The difference is in the detection parameters g0 and sigma.

## Plotting alternate model fits

```{r}

plot(fit.EX, limits = T, xval = 0:300)
plot(fit.HN, limits = T, xval = 0:300)

```

Apply AICc.

```{r}

AIC(fits,criterion = 'AICc')

```

The most-supported model is the exponential, with an AICc weight of 0.99 and a ΔAICc from the exponential to the half-normal of 8.4.

## Choosing Buffer Width 

Now we print an initial estimate of sigma, a spatial scale parameter influencing the shape of the decline in capture probability with distance from the home range centre. The 'RPSV' function uses an approximation from a circular bivariate normal distribution to estimate sigma. 4 x sigma is suitable as an initial rule-of thumb buffer width, although it fails to account for a truncation of movements at the edge of the trapping grid (Efford, 2022). This potential buffer width differs across sessions so we choose to use the maximum (\~300).

```{r}

initialsigma <- RPSV(CH_zero, CC = TRUE) 
print(initialsigma)
lapply(initialsigma, FUN = function(x) print(x*4))

```

We check this further by plotting the decline in detection probability when we fit a simple model, and the decline in estimated density with increasing buffer width. 

```{r}

esa.plot(fit.EX)
abline(v = 300, lty = 2, col = 'red')

```


The fitted detection function and esa.plot indicate that a 300 m buffer width is sufficient to encompass all individuals with any non-negligible probability of being captured. The estimated density reaches a plateau before 300m.


## Fitting alternate models

We have selected a set of candidate models for comparison via AICc. The first 'fit.EX' is our original null model with the exponential detection function. We will compare this to a model where density varies by site 'fit.site.D.EX', where density and g0 vary by site 'fit.site.D.g0.EX', where only g0 varies by site 'fit.site.g0.EX', where density varies by season 'fit.season.D.EX', where density and g0 vary by season 'fit.season.D.g0.EX', and where only g0 varies by season 'fit.season.g0.EX'. 

```{r}
#null model
#fit.EX

# Load covariate information
covariates <- read.csv("Data/covariates.csv")

# Site models
fit.site.D.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ site, g0 ~ 1, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

fit.site.D.g0.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ site, g0 ~ site, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

fit.site.g0.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ 1, g0 ~ site, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

# Season models
fit.season.D.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ season, g0 ~ 1, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

fit.season.D.g0.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ season, g0 ~ season, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

fit.season.g0.EX <- secr.fit(CH,
                    detectfn = 'EX',
                    buffer = 300,
                    model = list(D ~ 1, g0 ~ season, sigma ~1), 
                    details = list(autoini = 4),
                    trace = FALSE, 
                    verify = F,
                    sessioncov = covariates)

# Now combining to compare via AICc
fits <- secrlist(EX = fit.EX,
                 site.D = fit.site.D.EX,
                 site.D.g0 = fit.site.D.g0.EX,
                 site.g0 = fit.site.g0.EX,
                 season.D = fit.season.D.EX,
                 season.D.g0 = fit.season.D.g0.EX,
                 season.g0 = fit.season.g0.EX
                 )


AIC(fits,criterion = 'AICc')

```
It appears that the model for site-specific density has the greatest support, with an AICc weight of 0.65 and a ΔAICc from the site-specific density model to the site-specific density and g0 of 2.001. We will use this model to estimate density and population size.

We will examine the coefficients and the density, g0, and sigma estimates for the site-specific density model, but will also look at the site-specific density and g0 model to check if there's any large difference between the outputs of these since they were close in the AICc.

```{r}

summary(fit.site.D.EX)
summary(fit.site.D.g0.EX)

```

The positive coefficient for site indicates an increase in density at Scrammy (Site A). The density estimate is also higher there. The two models mostly give similar estimates, so we are confident that our results change very little with the two models.

Now we will extract the values of g0 for alternate states of parameter B (captured 1, or not captured 0).

```{r}

predict(fit.site.D.B.g0.EX, newdata = data.frame(B = 0:1), realnames = "g0")

```


## Population size estimate

First load the habitat layer and transform it to the same projection as the trap file. 

```{r}

# Load habitat layer
habitat_layer <- read_sf("Data/AOI_DISSOLVED.shp")

# Transform so it has the same projection as the trap file
habitat_layer <- st_transform(habitat_layer, crs = 7855)

```

Then use the 'region.N' function to estimate the population size within the habitat layer.

```{r}

region.N(fit.site.D.EX,
         region = habitat_layer
         )

```
## Calculate the average population size
We standardise the mean population size by weighting each estimate by the inverse of the variance. 

```{r}

SiteA <- 2175.953
SiteA_SE <- 462.3759

SiteB <- 922.5362
SiteB_SE <- 252.8003

wA <- 1/(SiteA_SE^2)
wB <- 1/(SiteB_SE^2)

N <- (wA*SiteA + wB*SiteB)/(wA + wB)

SE <- sqrt(1/(wA + wB))
CI <- 1.96*SE

print(paste0("Mean Population size is ", round(N,2), " with a standard error of ", round(SE,2)))

  
```


# References

Borchers, D. L., and M. G. Efford. 2008. Spatially explicit maximum likelihood methods for capture– recapture studies. Biometrics 64:377–385.

Efford, M. 2022. A tutorial on fitting spatially explicit capture–recapture models in secr. <https://www.otago.ac.nz/density/pdfs/secr-tutorial.pdf>.

Otis, D. L., K. P. Burnham, G. C. White, and D. R. Anderson. 1978. Statistical inference from capture data on closed animal populations. Wildlife Monographs:3–135.

# Session information

```{r}
sessionInfo()

```
